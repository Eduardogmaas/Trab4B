# -*- coding: utf-8 -*-
"""MilitaresDecisionTree

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lyEJmKr7gDhKazcoFljC2ClwBA5Zfd4q
"""

from google.colab import drive

import matplotlib.pyplot as plt

import pandas as pd

pip install streamlit matplotlib

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn import tree
import streamlit as st

streamlit run app.py

pd.options.display.max_columns = None
pd.options.display.max_rows = None

drive.mount('/drive')

database_path = '/drive/202401_Remuneracao.csv'

database_path = '/drive/202401_Cadastro.csv'

!pwd

remuMilitares = pd.read_csv('/drive/MyDrive/202401_Remuneracao.csv', sep=';', encoding='latin-1', low_memory = False )

cadMilitares = pd.read_csv('/drive/MyDrive/202401_Cadastro.csv', sep=';', encoding='latin-1', low_memory = False )

from google.colab import drive
drive.mount('/content/drive')

remuMilitares.info()

cadMilitares.info()

#Conversão dos dados que estão STR para FLOAT
remuMilitares['REMUNERAÇÃO BÁSICA BRUTA (R$)'] = remuMilitares['REMUNERAÇÃO BÁSICA BRUTA (R$)'].replace('R\$', '', regex=True).str.replace('.', '').str.replace(',', '.').astype(float)

#Conversão dos dados que estão STR para FLOAT
remuMilitares['GRATIFICAÇÃO NATALINA (R$)'] = remuMilitares['GRATIFICAÇÃO NATALINA (R$)'].replace('R\$', '', regex=True).str.replace('.', '').str.replace(',', '.').astype(float)

#Conversão dos dados que estão STR para FLOAT
remuMilitares['REMUNERAÇÃO APÓS DEDUÇÕES OBRIGATÓRIAS (R$)'] = remuMilitares['REMUNERAÇÃO APÓS DEDUÇÕES OBRIGATÓRIAS (R$)'].replace('R\$', '', regex=True).str.replace('.', '').str.replace(',', '.').astype(float)

remuMilitares[remuMilitares['NOME'] == 'CARLOS CHAGAS VIANNA BRAGA']

df_merged = pd.merge(remuMilitares, cadMilitares, on='NOME')

resultado = df_merged[df_merged['NOME'] == 'AARAO HENRIQUE PEREIRA TAVARES'][['NOME', 'DESCRICAO_CARGO']]

print(resultado)

# Selecionar colunas relevantes
df_filtered = df_merged[['NOME', 'REMUNERAÇÃO BÁSICA BRUTA (R$)', 'DESCRICAO_CARGO']].copy()

# Verificar valores nulos
print(df_filtered.isnull().sum())

# Preencher ou remover valores nulos
df_filtered.dropna(inplace=True)

# Garantir que os valores da coluna sejam strings antes de limpar
df_filtered['REMUNERAÇÃO BÁSICA BRUTA (R$)'] = df_filtered['REMUNERAÇÃO BÁSICA BRUTA (R$)'].astype(str)

# Remover caracteres especiais e converter para float
df_filtered['REMUNERAÇÃO BÁSICA BRUTA (R$)'] = (
    df_filtered['REMUNERAÇÃO BÁSICA BRUTA (R$)']
    .str.replace('R$', '', regex=False)  # Remove o símbolo "R$"
    .str.replace('.', '', regex=False)   # Remove os pontos (separador de milhar)
    .str.replace(',', '.', regex=False)  # Substitui vírgula por ponto (formato decimal)
    .astype(float)  # Converte para float
)

# Codificar as patentes em valores numéricos
label_encoder = LabelEncoder()
df_filtered['DESCRICAO_CARGO_COD'] = label_encoder.fit_transform(df_filtered['DESCRICAO_CARGO'])

# Exibir mapeamento
print(dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_))))

# Remover a coluna de nome, pois não é relevante para o treinamento
df_model = df_filtered.drop(columns=['NOME', 'DESCRICAO_CARGO'])

# Entradas (X) e rótulo (y)
X = df_model[['REMUNERAÇÃO BÁSICA BRUTA (R$)']]
y = df_model['DESCRICAO_CARGO_COD']

# Divisão dos dados em treino (80%) e teste (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Tamanho dos conjuntos
print("Tamanho do conjunto de treino:", len(X_train))
print("Tamanho do conjunto de teste:", len(X_test))

model = DecisionTreeClassifier(criterion="entropy", max_depth=5)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

# Dados de treino
print("Dados de treino (entradas):")
print(X_train.head())
print("Dados de treino (rótulos):")
print(y_train.head())

# Dados de teste
print("Dados de teste (entradas):")
print(X_test.head())
print("Dados de teste (rótulos):")
print(y_test.head())

clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

print("Relatório de classificação:")
print(classification_report(y_test, y_pred))

print("Acurácia do modelo:")
print(accuracy_score(y_test, y_pred))

X = df_filtered[['REMUNERAÇÃO BÁSICA BRUTA (R$)']]
y = df_filtered['DESCRICAO_CARGO_COD']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier(max_depth=5, random_state=42)
clf.fit(X_train, y_train)

clf = DecisionTreeClassifier(max_depth=3, random_state=42)  # Ajuste para uma profundidade menor
clf.fit(X_train, y_train)

plt.figure(figsize=(25, 15))
tree.plot_tree(clf, feature_names=['REMUNERAÇÃO BÁSICA BRUTA (R$)'], class_names=y.unique().astype(str), filled=True)
plt.show()

plt.figure(figsize=(25, 15))
tree.plot_tree(clf, feature_names=['REMUNERAÇÃO BÁSICA BRUTA (R$)'], class_names=y.unique().astype(str), filled=True)
plt.show()

